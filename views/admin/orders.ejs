<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>VOGUE - Order Management</title>
  <link href="https://fonts.googleapis.com/css2?family=Cinzel:wght@400;700&family=Montserrat:wght@300;400;700&family=Playfair+Display:wght@400&display=swap" rel="stylesheet">
  <script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.11.5/gsap.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.11.5/ScrollTrigger.min.js"></script>
  <link rel="stylesheet" href="/admin/orderStyle.css%>">
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
  <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
</head>
<body>
  <!-- Include the Header (Navbar and Sidebar) -->
  <%- include('../../views/partials/admin/header') %>

  <!-- Main Content Wrapper -->
  <div class="main-content">
    <!-- Order Management Header -->
    <div class="order-management-header">
      <div class="text-container">
        <h1 id="typewriter">Order Management</h1>
        <div class="subtitle">Oversee VORAODIâ€™s Orders</div>
        <!-- <p>Manage with Elegance</p> -->
      </div>
    </div>

    <!-- Order List Section -->
    <div class="order-list">
      <!-- <h2>Order List</h2> -->

      <!-- Search Bar -->
      <div class="order-search-container">
        <form id="searchForm" action="/admin/searchOrder" method="GET" class="order-search-form">
          <input type="text" name="query" id="searchInput" placeholder="Search orders..." class="order-search-input" value="<%= typeof searchQuery !== 'undefined' ? searchQuery : '' %>" required>
          <button type="submit" class="order-search-button">Search</button>
          <button type="button" class="order-search-clear" onclick="clearSearch()">Clear</button>
        </form>
      </div>

      <div class="orders-table">
        <table>
          <thead>
            <tr>
              <th>Order ID</th>
              <th>Customer</th>
              <th>Order Date</th>
              <th>Total Amount</th>
              <th>Payment Method</th>
              <th>Status</th>
              <th>Action</th>
            </tr>
          </thead>
          <tbody>
            <!-- Replace the existing table row in your HTML file -->
            <% if (orders && orders.length > 0) { %>
    <% orders.forEach(order => { %>
            <tr id="order-<%= order._id%>">
            <td><%= order.orderId.toString().substring(0,30) + '...'  %></td>
            <td><%= order.username %></td>
            <td><%= order.orderedDate %></td>
            <td><%= order.totalAmount %></td>
            <td><%= order.paymentMethod %></td>
            <td>
                <% if (order.returnStatus === 'Returned' || order.returnStatus === 'Rejected' || order.returnStatus === 'Requested') { %>
                    <span class="return-status-span"><%= order.returnStatus %></span>
                <% } else if (order.status === 'Delivered'){ %>
                    <span class="order-delivered"><%= order.status %></span>
                <% }else if(order.status === 'Cancelled') {%>
                  <span class="order-cancelled"><%= order.status %></span>
                <% } else {%>
                  <select class="status-select status-<%= order.status ? order.status.toLowerCase() : 'pending' %>" 
                            onchange="updateOrderStatus('<%= order.orderId %>', this.value)">
                        <% if (order.status !== 'Pending') { %>
                            <option value="Pending">Pending</option>
                        <% } %>
                        <option value="Processing" <%= order.status === 'Processing' ? 'selected' : '' %>>Processing</option>
                        <option value="Shipped" <%= order.status === 'Shipped' ? 'selected' : '' %>>Shipped</option>
                        <option value="Delivered" <%= order.status === 'Delivered' ? 'selected' : '' %>>Delivered</option>
                        <option value="Cancelled" <%= order.status === 'Cancelled' ? 'selected' : '' %>>Cancelled</option>
                    </select>
                <% } %>
            </td>
            <td>
                <button class="action-btn view-btn" aria-label="View Order Details">
                    <a href="/admin/orderDetails?orderId=<%= order.orderId %>">View Details</a>
                </button>
            </td>
        </tr>
    <% }) %>
<% } else { %>
    <tr>
        <td colspan="7">No orders found.</td>
    </tr>
<% } %>
          </tbody>
        </table>
      </div>
    </div>

    <!-- Pagination Section -->
    <div class="pagination">
      <nav aria-label="Page navigation">
        <ul class="pagination-list">
          <% if (typeof totalPages === 'number' && totalPages > 0) { %>
            <% for (let i = 1; i <= totalPages; i++) { %>
              <li class="page-item <%= i === currentPage ? 'active' : '' %>">
                <a class="page-link" href="<%= typeof searchQuery !== 'undefined' ? '/admin/searchOrder?page=' + i + '&query=' + encodeURIComponent(searchQuery) : '/admin/orders?page=' + i %>">
                  <%= i %>
                </a>
              </li>
            <% } %>
          <% } %>
        </ul>
      </nav>
    </div>
  </div>

  <script>
    // Search Form Submission
    document.getElementById('searchForm').addEventListener('submit', function(e) {
      e.preventDefault();
      const query = document.getElementById('searchInput').value.trim();
      const route = query.length > 0 ? '/admin/searchOrder' : '/admin/orders';

      fetch(`/admin/searchOrder?query=${encodeURIComponent(query)}`)
        .then(res => res.text())
        .then(html => {
          const parser = new DOMParser();
          const doc = parser.parseFromString(html, 'text/html');
          const newTable = doc.querySelector('.orders-table');
          const newPagination = doc.querySelector('.pagination');
          document.querySelector('.orders-table').innerHTML = newTable.innerHTML;
          document.querySelector('.pagination').innerHTML = newPagination.innerHTML;
        })
        .catch(err => {
          console.error('Search Orders Error', err);
        });
    });

    // Pagination
    document.addEventListener('click', function(e) {
      if (e.target.classList.contains('page-link')) {
        e.preventDefault();
        const url = new URL(e.target.href);
        const page = url.searchParams.get('page');
        const query = document.getElementById('searchInput').value.trim();
        const route = query.length > 0 
          ? `/admin/searchOrder?page=${page}&query=${encodeURIComponent(query)}`
          : `/admin/orders?page=${page}`;

        fetch(route)
          .then(res => res.text())
          .then(html => {
            const parser = new DOMParser();
            const doc = parser.parseFromString(html, 'text/html');
            const newTable = doc.querySelector('.orders-table');
            const newPagination = doc.querySelector('.pagination');
            document.querySelector('.orders-table').innerHTML = newTable.innerHTML;
            document.querySelector('.pagination').innerHTML = newPagination.innerHTML;
          })
          .catch(err => {
            console.error('Error in pagination', err);
          });
      }
    });

    // Clear Search
    function clearSearch() {
      document.getElementById('searchInput').value = "";
      fetch('/admin/orders')
        .then(res => res.text())
        .then(html => {
          const parser = new DOMParser();
          const doc = parser.parseFromString(html, 'text/html');
          const newTable = doc.querySelector('.orders-table');
          const newPagination = doc.querySelector('.pagination');
          document.querySelector('.orders-table').innerHTML = newTable.innerHTML;
          document.querySelector('.pagination').innerHTML = newPagination.innerHTML;
        });
    }

    // Update Order Status
    async function updateOrderStatus(orderId, status) {
    try {
        // const result = await Swal.fire({
        // toast: true,
        // title: 'Update Status',
        // text: ``,
        // icon: '',
        // showCancelButton: true,
        // confirmButtonColor: '#004d00',
        // cancelButtonColor: '#ff4040',
        // confirmButtonText: 'update'
        // });

       
        const response = await fetch('/admin/updateOrderStatus', {
            method: 'POST',
            headers: {
            'Content-Type': 'application/json'
            },
            body: JSON.stringify({ orderId, status })
        });
        const data = await response.json();
        if (data.success) {
            // Update the select element's class for color change
            const selectElement = document.querySelector(`#order-${orderId} .status-select`);
            if (selectElement) {
            // Remove existing status classes
            selectElement.classList.remove('status-pending', 'status-processing', 'status-shipped', 'status-delivered');
            // Add new status class
            selectElement.classList.add(`status-${status.toLowerCase()}`);
            
            // Update options - remove Pending option if status is not Pending
            if (status !== 'Pending') {
                const pendingOption = selectElement.querySelector('option[value="Pending"]');
                if (pendingOption) {
                pendingOption.remove();
                }
            }
            }
            
            Swal.fire({
              toast: true,
              icon: 'success',
              title: data.message || 'Order Status updated',
              position: 'top-end',
              showConfirmButton: false,
              timer: 2000,
              timerProgressBar: true,
            });
            refreshOrderTable();
        } else {
            Swal.fire({
              toast: true,
              icon: 'error',
              title: data.message || 'Something went wrong. Please try again later.',
              position: 'top-end',
              showConfirmButton: false,
              timer: 2000,
              timerProgressBar: true,
            });
        }
      
    } catch (error) {
        console.error('Error updating status:', error);
        Swal.fire({
          toast: true,
          icon: 'error',
          title: data.message || 'Something went wrong. please try again later.',
          position: 'top-end',
          showConfirmButton: false,
          timer: 2000,
          timerProgressBar: true,
        });
    }
    }

    // Refresh Table
    function refreshOrderTable() {
      const query = document.getElementById('searchInput').value.trim();
      const currentPage = document.querySelector('.page-item.active .page-link')?.textContent || 1;
      const isSearching = query.length > 0;
      const url = isSearching 
        ? `/admin/searchOrder?page=${currentPage}&query=${encodeURIComponent(query)}`
        : `/admin/orders?page=${currentPage}`;

      fetch(url)
        .then(res => res.text())
        .then(html => {
          const parser = new DOMParser();
          const doc = parser.parseFromString(html, 'text/html');
          const newTable = doc.querySelector('.orders-table');
          const newPagination = doc.querySelector('.pagination');
          document.querySelector('.orders-table').innerHTML = newTable.innerHTML;
          document.querySelector('.pagination').innerHTML = newPagination.innerHTML;
        })
        .catch(err => {
          console.error('Error refreshing table:', err);
        });
    }
  </script>
</body>
</html>