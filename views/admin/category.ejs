<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>VOGUE - Category Management</title>
  <link href="https://fonts.googleapis.com/css2?family=Cinzel:wght@400;700&family=Montserrat:wght@300;400;700&family=Playfair+Display:wght@400&display=swap" rel="stylesheet">
  <script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.11.5/gsap.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.11.5/ScrollTrigger.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
  <link rel="stylesheet" href="/admin/categoryStyle.css">
</head>
<body>
  <!-- Include the Header (Navbar and Sidebar) -->
  <%- include('../../views/partials/admin/header') %>

  <!-- Main Content Wrapper -->
  <div class="main-content">
    <!-- Category Management Header -->
    <div class="customer-management-header">
      <div class="text-container">
        <h1 id="typewriter">Category Management</h1>
        <div class="subtitle">Organize the VOGUE Collection</div>
        <p>Curate with Elegance</p>
      </div>
    </div>

    <!-- Category List Section -->
    <div class="customer-list">
      <!-- Display Flash Messages -->
      <% if (locals.success && success.length > 0) { %>
        <div class="alert" style="color: #004d00;"><%= success %></div>
      <% } %>
      <% if (locals.error && error.length > 0) { %>
        <div class="alert" style="color: #ff4040;"><%= error %></div>
      <% } %>

      <!-- Add Category Form -->
      <div class="add-category-form-container">
        <h3>Add New Category</h3>
        <div class="subtitle">Expand the VOGUE Collection</div>
        <div id="form-messages" class="alert"></div>
        <form id="add-category-form" method="post" action="/admin/addCategory" class="horizontal-form">
          <div class="form-field">
            <label for="categoryName">Category Name</label>
            <input type="text" id="name" name="categoryName" required>
            <div id="name-error" class="error-message"></div>
          </div>
          <div class="form-field">
            <label for="description">Description</label>
            <input type="text" id="description" name="description" required>
            <div id="description-error" class="error-message"></div>
          </div>
          <button type="submit" class="submit-btn">Add Category</button>
        </form>
      </div>

      <!-- Category Table -->
      <div class="categories-table">
        <h2>Category List</h2>

              <!-- Search Bar -->
    <div class="customer-search-container">
      <form id="searchForm" action="/admin/searchCategory" method="GET" class="customer-search-form">
        <input type="text" name="query" id="searchInput" placeholder="Search customers..." class="customer-search-input" value="<%= typeof searchQuery !== 'undefined' ? searchQuery : '' %>" required>
        <button type="submit" class="customer-search-button">Search</button>
        <button type="button" class="customer-search-clear" onclick="clearSearch()">Clear</button>
      </form>
    </div>
      <div class="category-table">
        <table>
          <thead>
            <tr>
              <th>Category Name</th>
              <th>Description</th>
              <th>Offer Price</th>
              <th>Offer</th>
              <th>Status</th>
              <th>List/Unlist</th>
              <th>Action</th>
            </tr>
          </thead>
          <tbody>
            <% cat.forEach((category, index) => { %>
              <tr id="category-<%= category._id%>">
                <td class="text-start"><%= category.name %></td>
                <td class="text-start"><%= category.description || 'No description' %></td>
                <td>
                  <% if (category.categoryOffer) { %>
                    <%= category.categoryOffer %>%
                  <% } else { %>
                    0%
                  <% } %>
                </td>
                <td class="text-start">
                  <% if (!category.categoryOffer || category.categoryOffer === 0) { %>
                    <button class="view-btn" style="width: 100px" onclick="addOffer('<%= category._id%>')">
                      Add Offer
                    </button>
                  <% } else { %>
                    <button class="block-btn" style="width: 100px" onclick="removeOffer('<%= category._id%>')">
                      Remove Offer
                    </button>
                  <% } %>
                </td>
                <!--  -->
                <td class="text-start">
                  <% if (category.isListed) { %>
                    <span class="badge rounded-pill alert-success">Listed</span>
                  <% } else { %>
                    <span class="badge rounded-pill alert-danger">Unlisted</span>
                  <% } %>
                </td>
                <!--  -->
                <td class="text-start">
                  <% if (category.isListed) { %>
                    <button class="block-btn" style="width: 80px; margin-right: 5px;" onclick="confirmUnlistCategory('<%= category._id %>')">
                      Unlist
                    </button>
                  <% } else { %>
                    <button class="unblock-btn" style="width: 80px; margin-right: 5px;" onclick="confirmListCategory('<%= category._id %>')">
                      List
                    </button>
                  <% } %>
                </td>
                <!--  -->
                <td class="text-start">
                  <button class="unblock-btn" style="width: 100px">
                    <a href="/admin/editCategory?id=<%= category._id %>" class="text-white">Edit</a>
                  </button>
                  <button class="action-btn delete-btn" aria-label="Delete Category" onclick="confirmDelete('<%= category._id %>')">
                    <a href="#" class="text-white">Delete</a>
                  </button>
                </td>
              </tr>
            <% }) %>
          </tbody>
        </table>
      </div>
    </div>

      <!-- Pagination -->
      <div class="pagination">
      <nav aria-label="Page navigation">
        <ul class="pagination-list">
          <% for (let i = 1; i <= totalPages; i++) { %>
            <li class="page-item <%= i === currentPage ? 'active' : '' %>">
              <a class="page-link" href="<%= typeof searchQuery !== 'undefined' ? '/admin/searchCategory?page=' + i + '&query=' + encodeURIComponent(searchQuery) : '/admin/category?page=' + i %>">
                <%= i %>
              </a>
            </li>
          <% } %>
        </ul>
      </nav>
    </div>
    </div>
  </div>

  <script>

 // Prevents the default form submission
  document.getElementById('searchForm').addEventListener('submit',function(e){
    e.preventDefault()

    const query = document.getElementById('searchInput').value.trim();

    const route = query.length > 0 ? '/admin/searchCategory' : '/admin/category';

    fetch(`/admin/searchCategory?query=${encodeURIComponent(query)}`)
      .then(res => res.text())
        .then(html =>{
        //Parse the returned HTML string into DOM
        const parser = new DOMParser();
        const doc = parser.parseFromString(html, 'text/html');

        //Find the new Cus table and pagin from etched html
        const newTable = doc.querySelector('.category-table');
        const newPagination = doc.querySelector('.pagination');

        //Replace the old ones on the page with new content
        document.querySelector('.category-table').innerHTML = newTable.innerHTML;
        document.querySelector('.pagination').innerHTML = newPagination.innerHTML;
      })
      .catch(err=>{
        console.error('Search category Error',err);
      });
  });
  
  
  // Pagination 
  document.addEventListener('click',function(e){
    if(e.target.classList.contains('page-link')){
      e.preventDefault();
      const url = new URL(e.target.href);
      const page = url.searchParams.get('page');
      const query = document.getElementById('searchInput').value.trim();

      fetch(`/admin/searchCategory?page=${page}&query=${encodeURIComponent(query)}`)
      .then(res => res.text())
      .then(html =>{
        const parser = new DOMParser();
        const doc = parser.parseFromString(html,'text/html');

        const newTable = doc.querySelector('.category-table');
        const newPagination = doc.querySelector('.pagination');
        
        document.querySelector('.category-table').innerHTML = newTable.innerHTML;
        document.querySelector('.pagination').innerHTML = newPagination.innerHTML;
      })
      .catch(err =>{
        console.error('Error in category pagination',err);
      });
    }

  });
    
  // Clear Search
  function clearSearch() {
    document.getElementById('searchInput').value = "";

    fetch('/admin/category')
    .then(res => res.text())
    .then(html =>{
      const parser = new DOMParser();
      const doc = parser.parseFromString(html,'text/html');
      const newTable = doc.querySelector('.category-table');
      const newPagination = doc.querySelector('.pagination');

      document.querySelector('.category-table').innerHTML = newTable.innerHTML;
      document.querySelector('.pagination').innerHTML = newPagination.innerHTML;
    });
  }

    // Confirm Delete
    async function confirmDelete(categoryId) {
      event.preventDefault();

      const result = await Swal.fire({
      toast: true,
      title: 'Are you sure?',
      text: 'Do you want to delete this product?',
      icon: 'warning',
      showCancelButton: true,
      confirmButtonColor: '#004d00',
      cancelButtonColor: '#ff4040',
      confirmButtonText: 'Yes, delete it!',
      cancelButtonText: 'Cancel'
      });

      if(result.isConfirmed){
        try {
          const response = await fetch(`/admin/deleteCategory?id=${categoryId}`,{
            method: 'GET',
          });

          if(response.redirected && response.url.includes('/admin/category')){
            reloadCategoryTable();
            Swal.fire({
              toast: true,
              title: 'Deleted',
              text: 'The category has been deleted',
              icon: 'success',
              position: 'center',
              showConfirmButton: true,
              confirmButtonText: 'OK',
              timer: 1500,
              timerProgressBar: true,
              customClass: {
                popup: 'premium-toast',
                confirmButton: 'premium-btn',
                title: 'premium-title'
              }
            });

          }else{
            Swal.fire('Failed', 'Could not delete the category', 'error');
          }
        } catch (error) {
          console.error('Error in delete category',error);
          Swal.fire('Error', 'Something went wrong whilte deleting.', 'error');
        }
      }
    }

    //Add category fetch

    document.getElementById('add-category-form').addEventListener('submit', async(e)=>{
      e.preventDefault();
      if(!validateForm()) return;

      const formData = {
        categoryName: e.target.categoryName.value,
        description: e.target.description.value
      }

      try {
        const response = await fetch('/admin/addCategory',{
          method: 'POST',
          headers: {
            "Content-Type":"application/json"
          },
          body: JSON.stringify(formData)
        });

        const data = await response.json();

        if(response.ok){
          Swal.fire({
            toast: true,
            icon: 'success',
            title: 'Category Added',
            text: data.message,
            confirmButtonColor: '#004d00'
          });

          // Reset form
          e.target.reset();

          // Refresh table & pagin
          const updatedPage = await fetch('/admin/category');
          const html = await updatedPage.text();
          const parser = new DOMParser();
          const doc = parser.parseFromString(html, 'text/html');


          const newTable = doc.querySelector('.category-table');
          const newPagination = doc.querySelector('.pagination');

          document.querySelector('.category-table').innerHTML = newTable.innerHTML;
          document.querySelector('.pagination').innerHTML = newPagination.innerHTML;

        }else{
          Swal.fire({
            toast: true,
            icon: 'error',
            title: 'Add Failed',
            text: data.message || 'Something went wrong.',
            confirmButtonColor: '#ff4040'
          });
        }

      } catch (error) {
        console.error('Add category error',error);
        Swal.fire({
          toast: true,
          icon: 'error',
          title: 'Server Error',
          text: 'Failed to add category',
          confirmButtonColor: '#ff4040'
        });
      }
    });


    // Form Validation
    function validateForm() {
      clearErrorMessages();
      const name = document.getElementById('name').value.trim();
      const description = document.getElementById('description').value.trim();
      let isValid = true;

      if (name === '') {
        displayErrorMessage('name-error', 'Please enter a category name');
        isValid = false;
      } else if (!/^[a-zA-Z\s]+$/.test(name)) {
        displayErrorMessage('name-error', 'Category name can only contain alphabetic characters and spaces');
        isValid = false;
      }

      if (description === '') {
        displayErrorMessage('description-error', 'Please enter a description');
        isValid = false;
      }

      return isValid;
    }

    function displayErrorMessage(elementId, message) {
      const errorElement = document.getElementById(elementId);
      errorElement.innerText = message;
      errorElement.style.display = 'block';
      setTimeout(() => {
        errorElement.innerText = '';
        errorElement.style.display = 'none';
      }, 3000); // Clear error after 3 seconds
    }

    function clearErrorMessages() {
      const errorElements = document.getElementsByClassName('error-message');
      Array.from(errorElements).forEach((element) => {
        element.innerText = '';
        element.style.display = 'none';
      });
    }

    // Clear Message Div
    function clearMessageDiv() {
      const messageDiv = document.getElementById('form-messages');
      messageDiv.textContent = '';
      messageDiv.style.opacity = '0';
    }

    // Add Offer
    function addOffer(categoryId){
      event.preventDefault();
      Swal.fire({
        toast: true,
        title: 'Offer in percentage',
        input: 'number',
        inputLabel: 'Percentage',
        inputPlaceholder: '%',
        showCancelButton: true,
        cancelButtonText: 'Cancel',
        cancelButtonColor: '#ff4040',
      }).then((result) =>{
        if(result.isConfirmed){
          fetch(`/admin/addCategoryOffer`,{
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({
              id: categoryId,
              percentage: result.value
            })
          })
          .then(res => res.json())
          .then(data =>{
            if(data.success){
              Swal.fire('Offer Added', '', 'success');
              reloadCategoryTable();
            }else{
              Swal.fire('Failed to add offer', '', 'error');
            }
          })
          .catch(err =>{
            Swal.fire('Error!', 'Something went wrong', 'error');
            console.error('Add offer error:',err);
          })
        }
      })
    }


    // Remove Offer
    function removeOffer(categoryId){
      event.preventDefault();
      Swal.fire({
        toast: true,
        title: 'Remove Offer',
        text: 'Are you sure you want to remove this offer?',
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#3085d6',
        cancelButtonColor: '#ff4040',
        confirmButtonText: 'Yes, remove it!',
        cancelButtonText: 'Cancel'
      }).then((result)=>{
        if(result.isConfirmed){
          fetch(`/admin/removeCategoryOffer?`,{
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({ id: categoryId }) 
          })
          .then(res => res.json())
          .then(data =>{
            if(data.success){
              Swal.fire('Offer Removed', '', 'success');
              reloadCategoryTable();
            }else{
              Swal.fire('Failed to remove offer', '', 'error');
            }
          })
          .catch(err =>{
            Swal.fire('Error!', 'Something went wrong.', 'error');
            console.error('Remove offer error:',err);
          });
        }
      });
    }

// List category
function confirmListCategory(id) {
  event.preventDefault();
  Swal.fire({
    toast: true,
    title: 'Are you sure?',
    text: 'Do you want to list this category?',
    icon: 'warning',
    showCancelButton: true,
    confirmButtonColor: '#004d00',
    cancelButtonColor: '#ff4040',
    confirmButtonText: 'List'
  }).then((result) => {
    if (result.isConfirmed) {
      fetch(`/admin/unlistCategory?id=${id}`)
        .then(res => res.json())
        .then(data => {
          if (data.success) {
            Swal.fire('Listed!', '', 'success');
            reloadCategoryTable();
          } else {
            Swal.fire('Failed to list!', '', 'error');
          }
        })
        .catch(err => {
          Swal.fire('Error!', 'Something went wrong.', 'error');
          console.error('List category error:', err);
        });
    }
  });
}


// Unlist category
function confirmUnlistCategory(id) {
  event.preventDefault();
  Swal.fire({
    toast: true,
    title: 'Are you sure?',
    text: 'Do you want to unlist this category?',
    icon: 'warning',
    showCancelButton: true,
    confirmButtonColor: '#004d00',
    cancelButtonColor: '#ff4040',
    confirmButtonText: 'Unlist'
  }).then((result) => {
    if (result.isConfirmed) {
      fetch(`/admin/listCategory?id=${id}`)
        .then(res => res.json())
        .then(data => {
          if (data.success) {
            Swal.fire('Unlisted!', '', 'success');
            reloadCategoryTable();
          } else {
            Swal.fire('Failed to unlist!', '', 'error');
          }
        })
        .catch(err => {
          Swal.fire('Error!', 'Something went wrong.', 'error');
          console.error('Unlist category error:', err);
        });
    }
  });
}


// Reaload table
function reloadCategoryTable() {
  const query = document.getElementById('searchInput').value.trim();
  const queryString = query ? `?query=${encodeURIComponent(query)}` : '';

  fetch(`/admin/searchCategory${queryString}`)
    .then(res => res.text())
    .then(html => {
      const parser = new DOMParser();
      const doc = parser.parseFromString(html, 'text/html');

      const newTable = doc.querySelector('.category-table');
      const newPagination = doc.querySelector('.pagination');

      document.querySelector('.category-table').innerHTML = newTable.innerHTML;
      document.querySelector('.pagination').innerHTML = newPagination.innerHTML;
    })
    .catch(err => console.error('Reload category table error:', err));
}

  </script>
</body>
</html>