<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>VOGUE - Checkout</title>
    <link href="https://fonts.googleapis.com/css2?family=Montserrat:wght@400;500;600;700;800&display=swap" rel="stylesheet">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.11.5/gsap.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.11.5/ScrollTrigger.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script src="/re-use/toast.js"></script>
    <link rel="stylesheet" href="/user/checkoutStyle.css">
    <link rel="stylesheet" href="/user/footerStyle.css">
</head>
<body>
    <%- include('../../views/partials/user/header') %>

    <div class="checkout-container">
        <div class="checkout-content">
            <div class="checkout-header">
                <h1 class="checkout-title">Checkout</h1>
                <p class="checkout-subtitle">Review your order before payment</p>
            </div>
            
            <div class="checkout-grid">
                <!-- Left Column - Cart Items & Address -->
                <div class="checkout-left">
                    <!-- Cart Items Section -->
                    <div class="checkout-section cart-section">
                        <div class="section-header">
                            <i data-lucide="shopping-bag" class="section-icon"></i>
                            <h2>Your Cart Items</h2>
                        </div>
                        
                        <% if (cartItems && cartItems.length > 0) { %>
                            <div class="cart-table">
                                <div class="cart-table-header">
                                    <div class="cart-column product-column">Product</div>
                                    <div class="cart-column price-column">Price</div>
                                    <div class="cart-column size-column">Size</div>
                                    <div class="cart-column quantity-column">Qty</div>
                                    <div class="cart-column total-column">Total</div>
                                </div>
                                <% cartItems.forEach(item => { %>
                                    <% if (item.productId) { %>
                                        <div class="cart-table-row">
                                            <div class="cart-column product-column">
                                                <div class="cart-product">
                                                    <img src="<%= item.productId.productImage[0] %>" alt="<%= item.productId.productName %>" class="cart-product-image" />
                                                    <span class="cart-product-name"><%= item.productId.productName %></span>
                                                </div>
                                            </div>
                                            <div class="cart-column price-column">
                                                <span>₹<%= item.productId.salePrice.toFixed(2) %></span>
                                            </div>
                                            <div class="cart-column size-column">
                                                <span><%= item.size %></span>
                                            </div>
                                            <div class="cart-column quantity-column">
                                                <span><%= item.quantity %></span>
                                            </div>
                                            <div class="cart-column total-column">
                                                <span>₹<%= (item.productId.salePrice * item.quantity).toFixed(2) %></span>
                                            </div>
                                        </div>
                                    <% } %>
                                <% }) %>
                            </div>
                        <% } else { %>
                            <div class="empty-state">
                                <i data-lucide="shopping-cart" class="empty-icon"></i>
                                <p>Your cart is empty</p>
                            </div>
                        <% } %>
                    </div>
                    
                    <!-- Address Section -->
                    <div class="checkout-section address-section">
                        <div class="section-header">
                            <i data-lucide="map-pin" class="section-icon"></i>
                            <h2>Delivery Address</h2>
                        </div>
                        
                        <% if (userAddress && userAddress.length > 0) { %>
                            <div class="address-grid">
                                <% userAddress.forEach((address, index) => { %>
                                    <div class="address-card <%= index === 0 ? 'selected' : '' %>">
                                        <input type="radio" id="address-<%= address._id %>" name="addressId" value="<%= address._id %>" <%= index === 0 ? 'checked' : '' %> required>
                                        <label for="address-<%= address._id %>" class="address-details">
                                            <div class="address-item">
                                                <span class="address-label">Name:</span>
                                                <span><%= address.name %></span>
                                            </div>
                                            <div class="address-item">
                                                <span class="address-label">Address:</span>
                                                <span><%= address.street %>, <%= address.city %>, <%= address.state %>, <%= address.country %>, <%= address.pincode %></span>
                                            </div>
                                            <div class="address-item">
                                                <span class="address-label">Phone:</span>
                                                <span><%= address.phone %></span>
                                            </div>
                                            <% if (address.altPhone) { %>
                                                <div class="address-item">
                                                    <span class="address-label">Alt Phone:</span>
                                                    <span><%= address.altPhone %></span>
                                                </div>
                                            <% } %>
                                        </label>
                                        <button type="button" class="edit-address-btn" onclick="openEditModal('<%= address._id %>', '<%= address.name %>', '<%= address.street %>', '<%= address.city %>', '<%= address.state %>', '<%= address.country %>', '<%= address.pincode %>', '<%= address.phone %>', '<%= address.altPhone %>')">
                                            <i data-lucide="edit-2" width="16" height="16"></i>
                                        </button>
                                    </div>
                                <% }) %>
                            </div>
                            <button type="button" class="add-address-btn" onclick="openAddModal()">
                                <i data-lucide="plus"></i> Add New Address
                            </button>
                        <% } else { %>
                            <div class="empty-state">
                                <i data-lucide="map-pin-off" class="empty-icon"></i>
                                <p>No addresses found</p>
                                <button type="button" class="add-address-btn" onclick="openAddModal()">
                                    <i data-lucide="plus"></i> Add New Address
                                </button>
                            </div>
                        <% } %>
                    </div>
                </div>
                
                <!-- Right Column - Order Summary -->
                <div class="checkout-right">
                    <div class="checkout-section summary-section">
                        <div class="section-header">
                            <i data-lucide="file-text" class="section-icon"></i>
                            <h2>Order Summary</h2>
                        </div>
                        
                        <% if (cartItems && cartItems.length > 0) { %>
                            <div class="summary-details">
                                <div class="summary-item">
                                    <span>Subtotal (<%= cartItems.reduce((total, item) => total + item.quantity, 0) %> items)</span>
                                    <span>₹<%= subtotal.toFixed(2) %></span>
                                </div>
                                <div class="summary-item">
                                    <span>Savings</span>
                                    <span>-₹0.00</span>
                                </div>
                                <div class="summary-item">
                                    <span>Coupon Discount</span>
                                    <span>-₹0.00</span>
                                </div>
                                <div class="summary-item">
                                    <span>Delivery</span>
                                    <span>₹<%= deliveryCharge.toFixed(2) %></span>
                                </div>
                                <div class="summary-item total">
                                    <span>Total Amount</span>
                                    <span>₹<%= total.toFixed(2) %></span>
                                </div>
                            </div>
                            
                            <div class="coupon-section">
                                <div class="coupon-header">
                                    <i data-lucide="tags" class="coupon-icon"></i>
                                    <h3>Apply Coupon</h3>
                                    <button type="button" class="toggle-coupons-btn" onclick="toggleCoupons()">
                                        <i data-lucide="chevron-down" id="coupon-chevron"></i>
                                    </button>
                                </div>
                                <div class="coupon-input">
                                    <input type="text" id="coupon-code" placeholder="Enter coupon code" value="">
                                    <button type="button" class="apply-coupon-button">
                                        <i data-lucide="check"></i> Apply
                                    </button>
                                </div>
                                <div class="coupon-list" id="coupon-list" style="display: none;">
                                    <% if (availableCoupons && availableCoupons.length > 0) { %>
                                        <% availableCoupons.forEach(coupon => { %>
                                        <div class="coupon-option">
                                            <input type="radio" id="coupon-<%= coupon.code %>" name="coupon" value="<%= coupon.code %>">
                                            <label for="coupon-<%= coupon.code %>">
                                                <span class="coupon-code"><%= coupon.code %></span>
                                                <span class="coupon-value">-₹<%= coupon.amount %></span>
                                            </label>
                                        </div>
                                        <% }) %>
                                    <% } else { %>
                                        <div class="no-coupons">
                                            <i data-lucide="frown"></i>
                                            <p>No coupons available</p>
                                        </div>
                                    <% } %>
                                </div>
                            </div>
                            
                            <div class="payment-section">
                                <div class="section-header">
                                    <i data-lucide="credit-card" class="section-icon"></i>
                                    <h2>Payment Method</h2>
                                </div>
                                <div class="payment-options">
                                    <div class="payment-option">
                                        <input type="radio" id="razorpay" name="paymentMethod" value="razorpay" checked required>
                                        <label for="razorpay">
                                            <i data-lucide="smartphone"></i>
                                            <span>Razorpay (Cards/UPI/NetBanking)</span>
                                        </label>
                                    </div>
                                    <div class="payment-option">
                                        <input type="radio" id="cod" name="paymentMethod" value="cod">
                                        <label for="cod">
                                            <i data-lucide="package"></i>
                                            <span>Cash on Delivery</span>
                                        </label>
                                    </div>
                                    <div class="payment-option <%= wallet.balance < total ? 'disabled' : '' %>">
                                        <input 
                                            type="radio" 
                                            id="wallet" 
                                            name="paymentMethod" 
                                            value="wallet" 
                                            <%= wallet.balance < total ? 'disabled' : '' %>>
                                        <label for="wallet">
                                            <i data-lucide="wallet"></i>
                                            <span>Wallet (₹<%= wallet.balance.toFixed(2) %> available)</span>
                                        </label>
                                    </div>
                                </div>
                            </div>
                            
                            <button class="place-order-button" onclick="placeOrder('<%=user._id%>')">
                                <i data-lucide="shopping-cart"></i>
                                <span>Place Order • ₹<%= total.toFixed(2) %></span>
                            </button>
                        <% } else { %>
                            <div class="empty-state">
                                <i data-lucide="shopping-cart" class="empty-icon"></i>
                                <p>Your cart is empty</p>
                                <a href="/shop" class="continue-shopping-btn">
                                    <i data-lucide="arrow-left"></i> Continue Shopping
                                </a>
                            </div>
                        <% } %>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <%- include('../../views/partials/user/footer') %>

    <!-- Address Modal -->
    <div id="addressModal" class="modal-overlay">
        <div class="modal-content">
            <div class="modal-header">
                <h2 id="modalTitle">Add Address</h2>
                <button type="button" class="modal-close" onclick="closeModal()">
                    <i data-lucide="x"></i>
                </button>
            </div>
            <div id="form-message" class="form-message"></div>
            <form id="addressForm">
                <input type="hidden" id="addressId" value="">
                <div class="form-grid">
                    <div class="form-group">
                        <label for="name">NAME</label>
                        <input type="text" id="name" name="name" required>
                        <div class="error-message" id="name-error"></div>
                    </div>
                    <div class="form-group">
                        <label for="country">COUNTRY</label>
                        <input type="text" id="country" name="country" required>
                        <div class="error-message" id="country-error"></div>
                    </div>
                    <div class="form-group">
                        <label for="state">STATE</label>
                        <input type="text" id="state" name="state" required>
                        <div class="error-message" id="state-error"></div>
                    </div>
                    <div class="form-group">
                        <label for="city">CITY</label>
                        <input type="text" id="city" name="city" required>
                        <div class="error-message" id="city-error"></div>
                    </div>
                    <div class="form-group">
                        <label for="street">STREET</label>
                        <input type="text" id="street" name="street" required>
                        <div class="error-message" id="street-error"></div>
                    </div>
                    <div class="form-group">
                        <label for="pincode">PIN CODE</label>
                        <input type="text" id="pincode" name="pincode" required>
                        <div class="error-message" id="pincode-error"></div>
                    </div>
                    <div class="form-group">
                        <label for="phone">PHONE</label>
                        <input type="text" id="phone" name="phone" required>
                        <div class="error-message" id="phone-error"></div>
                    </div>
                    <div class="form-group">
                        <label for="altPhone">ALT PHONE</label>
                        <input type="text" id="altPhone" name="altPhone">
                        <div class="error-message" id="altPhone-error"></div>
                    </div>
                </div>
                <div class="modal-actions">
                    <button type="submit" class="save-btn">
                        <i data-lucide="save"></i> SAVE
                    </button>
                    <button type="button" class="cancel-btn" onclick="closeModal()">
                        <i data-lucide="x"></i> CANCEL
                    </button>
                </div>
            </form>
        </div>
    </div>
  
    <script src="https://unpkg.com/lucide@latest"></script>
    <script src="https://checkout.razorpay.com/v1/checkout.js"></script>
    <script>
        lucide.createIcons();

        window.retryOrderId = "<%= retryOrderId || '' %>";

        


    // Enhanced validation functions
    function isValidName(name) {
        return /^[a-zA-Z\s]{2,50}$/.test(name.trim());
    }

    function isValidField(field) {
        return field.trim().length >= 2;
    }

    function isValidPhone(phone) {
        phone = phone.trim();
        // Basic validation first
        if (!/^[6-9]\d{9}$/.test(phone)) return false;
        
        // Check for invalid patterns
        const invalidPatterns = [
            /^(\d)\1{9}$/, // All same digits
            '1234567890',
            '0123456789',
            '9876543210'
        ];
        
        return !invalidPatterns.some(pattern => 
            typeof pattern === 'string' ? phone === pattern : pattern.test(phone)
        );
    }

    function isValidPin(pin) {
        pin = pin.trim();
        // Basic 6-digit validation
        if (!/^[1-9]\d{5}$/.test(pin)) return false;
        
        // Check for sequential numbers (ascending or descending)
        const isSequential = (str) => {
            let ascending = true;
            let descending = true;
            for (let i = 1; i < str.length; i++) {
                if (parseInt(str[i]) !== parseInt(str[i-1]) + 1) ascending = false;
                if (parseInt(str[i]) !== parseInt(str[i-1]) - 1) descending = false;
            }
            return ascending || descending;
        };
        
        // Check for invalid patterns
        const invalidPatterns = [
            /^(\d)\1{5}$/, // All same digits
            isSequential // Just pass the function reference
        ];
        
        return !invalidPatterns.some(pattern => 
            typeof pattern === 'function' ? pattern(pin) : pattern.test(pin)
        );
    }

    // Modal Functions
    function openAddModal() {
        document.getElementById('modalTitle').textContent = 'ADD ADDRESS';
        document.getElementById('addressForm').reset();
        document.getElementById('addressId').value = '';
        document.getElementById('addressModal').style.display = 'flex';
        document.body.style.overflow = 'hidden';
    }

    function openEditModal(id, name, street, city, state, country, pincode, phone, altPhone) {
        document.getElementById('modalTitle').textContent = 'EDIT ADDRESS';
        document.getElementById('addressId').value = id;
        document.getElementById('name').value = name;
        document.getElementById('street').value = street;
        document.getElementById('city').value = city;
        document.getElementById('state').value = state;
        document.getElementById('country').value = country;
        document.getElementById('pincode').value = pincode;
        document.getElementById('phone').value = phone;
        document.getElementById('altPhone').value = altPhone || '';
        document.getElementById('addressModal').style.display = 'flex';
        document.body.style.overflow = 'hidden';
    }

    function closeModal() {
        document.getElementById('addressModal').style.display = 'none';
        document.body.style.overflow = 'auto';
    }

    // Helper function to show error for a specific field with auto-hide timer
    function showFieldError(fieldId, message) {
        const field = document.getElementById(fieldId);
        const errorElement = document.getElementById(`${fieldId}-error`);
        
        // Clear any existing timer for this field
        if (errorElement.timer) {
            clearTimeout(errorElement.timer);
        }
        
        field.classList.add('error');
        errorElement.textContent = message;
        errorElement.classList.add('show');
        
        // Set timer to hide the error after 5 seconds (5000 milliseconds)
        errorElement.timer = setTimeout(() => {
            errorElement.classList.remove('show');
            field.classList.remove('error');
        }, 5000);
        
        // Scroll to the first error field
        if (!document.querySelector('.form-group input.error:first-of-type')) {
            field.scrollIntoView({ behavior: 'smooth', block: 'center' });
        }
    }

    // Helper function to clear all errors immediately
    function clearAllErrors() {
        document.querySelectorAll('.error-message').forEach(el => {
            el.classList.remove('show');
            el.textContent = '';
            if (el.timer) {
                clearTimeout(el.timer);
            }
        });
        document.querySelectorAll('.form-group input').forEach(input => {
            input.classList.remove('error');
        });
    }

    // Form Submit Handler
    document.getElementById('addressForm').addEventListener('submit', function(e) {
        e.preventDefault();
        clearAllErrors();
        
        // Get form values
        const name = document.getElementById('name').value;
        const country = document.getElementById('country').value;
        const state = document.getElementById('state').value;
        const city = document.getElementById('city').value;
        const street = document.getElementById('street').value;
        const pincode = document.getElementById('pincode').value;
        const phone = document.getElementById('phone').value;
        const altPhone = document.getElementById('altPhone').value;

        // Validate fields
        let isValid = true;

        if (!isValidName(name)) {
            showFieldError('name', 'Please enter a valid name (2-50 characters, letters only)');
            isValid = false;
        }

        if (!isValidField(country)) {
            showFieldError('country', 'Please enter a valid country');
            isValid = false;
        }

        if (!isValidField(state)) {
            showFieldError('state', 'Please enter a valid state');
            isValid = false;
        }

        if (!isValidField(city)) {
            showFieldError('city', 'Please enter a valid city');
            isValid = false;
        }

        if (!isValidField(street)) {
            showFieldError('street', 'Please enter a valid street address');
            isValid = false;
        }

        if (!isValidPin(pincode)) {
            showFieldError('pincode', 'Please enter a valid 6-digit PIN code (no sequences or repetitions)');
            isValid = false;
        }

        if (!isValidPhone(phone)) {
            showFieldError('phone', 'Please enter a valid 10-digit phone number starting with 6-9');
            isValid = false;
        }

        if (altPhone && !isValidPhone(altPhone)) {
            showFieldError('altPhone', 'Please enter a valid alternate phone number or leave it empty');
            isValid = false;
        }

        if (!isValid) {
            return;
        }

        // If validation passes, proceed with form submission
        const formData = {
            name: name.trim(),
            country: country.trim(),
            state: state.trim(),
            city: city.trim(),
            street: street.trim(),
            pincode: pincode.trim(),
            phone: phone.trim(),
            altPhone: altPhone.trim()
        };

        const addressId = document.getElementById('addressId').value;
        const url = addressId ? `/edit-address/${addressId}` : '/add-address';
        const method = addressId ? 'PATCH' : 'POST';

        fetch(url, {
            method: method,
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(formData)
        })
        .then(res => res.json())
        .then(data => {
            if (data.success) {
                closeModal();
                toast(data);
            } else {
                toast(data, 'error');
            }
        })
        .catch(error => {
            console.error('Error:', error);
            toast({
                success: false, 
                message: 'Something went wrong. Please try again later'
            }, 'error');
        });
    });

    // Add real-time validation as users type (optional but recommended)
    document.querySelectorAll('#addressForm input').forEach(input => {
        input.addEventListener('input', function() {
            this.classList.remove('error');
            document.getElementById(`${this.id}-error`).classList.remove('show');
        });
    });

    // Close modal when clicking outside
    document.getElementById('addressModal').addEventListener('click', function(e) {
        if (e.target === this) {
            closeModal();
        }
    });

        function placeOrder(userId) {
            const selectedAddressInput = document.querySelector('input[name="addressId"]:checked');
            const selectedPaymentInput = document.querySelector('input[name="paymentMethod"]:checked');
            const couponCodeInput = document.getElementById('coupon-code');

            const addressId = selectedAddressInput ? selectedAddressInput.value : null;
            const paymentMethod = selectedPaymentInput ? selectedPaymentInput.value : null;
            const couponCode = couponCodeInput && couponCodeInput.value.trim() !== '' ? couponCodeInput.value.trim() : '';

            const urlParams = new URLSearchParams(window.location.search);
            const retryOrderId = urlParams.get('orderId'); // If retrying payment

            if (!addressId || !paymentMethod) {
                showMessage('Please select both address and payment method');
                return;
            }

            if(paymentMethod === 'razorpay'){
                // If retrying payment, send orderId
                let body = {
                    userId,
                    addressId,
                    couponCode
                };

                let endpoint = '/create-razorpay-order';

                if (retryOrderId) {
                    body = { orderId: retryOrderId,couponCode };
                    endpoint = '/retry-razorpay-order';
                }

                // Call backend to create Razorpay order
                fetch(endpoint,{
                    method: "POST",
                    headers: {
                        'Content-Type':'application/json'
                    },
                    body: JSON.stringify(body)
                })
                .then(res => res.json())
                .then(order => {
                    console.log("order:  ", order);
                    if(!order || !order.id){
                        alert('Failed to initiate razorpay payment');
                        return;
                    }

                    const options = {
                        key: '<%= process.env.RAZORPAY_KEY_ID %>',
                        amount: order.amount,
                        currency: "INR",
                        name: "VORAODI",
                        description: 'Order Payment',
                        image: '/images/voraodi.png',
                        order_id: order.id,
                        handler: async function (response){
                            fetch('/verify-razorpay-payment',{
                                method: 'POST',
                                headers: {
                                    'Content-Type':'application/json'
                                },
                                body: JSON.stringify({
                                    razorpay_payment_id: response.razorpay_payment_id,
                                    razorpay_order_id: response.razorpay_order_id,
                                    razorpay_signature: response.razorpay_signature,
                                    orderId: retryOrderId, // will be undefined for normal payment
                                    addressId,
                                    userId,
                                    couponCode,
                                })
                            })
                            .then(res => res.json())
                            .then(data => {
                                if(data.success){
                                    if (retryOrderId) {
                                        // Retry payment: order already exists, just redirect
                                        window.location.href = `/order-success/${retryOrderId}`;
                                    } else {
                                        // Normal payment: create order from cart
                                        fetch('/place-order',{
                                            method: "POST",
                                            headers: {
                                                'Content-Type':'application/json'
                                            },
                                            body: JSON.stringify({
                                                userId,
                                                addressId,
                                                paymentMethod,
                                                couponCode
                                            })
                                        })
                                        .then(result => result.json())
                                        .then(info => {
                                            if(info.success){
                                                const orderId = info.orderId
                                                window.location.href = `/order-success/${orderId}`;
                                            }else{
                                                alert(info.message || 'Order failed');
                                            }
                                        })
                                        .catch(err => {
                                            console.log("order error: ",err);
                                            alert('Something went wrong, please try again later');
                                        })
                                    }
                                }else{
                                    alert(data.message)
                                    alert('Payment Verification failed')
                                }
                            });
                        },
                        prefill: {
                            name: "<%= user.name%>",
                            email: "<%= user.email%>",
                            contact: "<%= user.phone%>",
                        },
                        theme: {
                            color : "#cca935"
                        }
                    }
                    const rzp = new Razorpay(options);
                    rzp.on('payment.failed', function (response) {
                        fetch('/payment-failed', {
                            method: "POST",
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({
                            userId,
                            addressId,
                            paymentMethod,
                            couponCode,
                            })
                        })
                        .then(res => res.json())
                        .then(data => {
                            if (data.success) {
                            window.location.href = `/payment-failed?orderId=${data.orderId}`;
                            } else {
                            alert('Failed to save failed order');
                            }
                        });
                        });
                    rzp.open()
                })
                .catch(err => {
                    console.log(err);
                    alert('Error initiating Razorpay');
                });
            
            }else{
                const orderId = retryOrderId;
                fetch('/place-order',{
                    method:'POST',
                     headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        userId,
                        addressId,
                        paymentMethod,
                        couponCode,
                        orderId,
                    })
                })
                .then(res => res.json())
                .then(data => {
                    if(data.success){
                        const orderId = data.orderId
                        window.location.href = `/order-success/${orderId}`;
                    }else{
                        alert(".....")
                        alert(data.message || 'Order failed');
                    }
                })
                .catch(err => {
                    console.log("order error: ",err);
                    alert('Something went wrong, please try again later');
                })
                // Set hidden form values
                // document.getElementById('hidden-address-id').value = addressId;
                // document.getElementById('hidden-payment-method').value = paymentMethod;
                // document.getElementById('hidden-coupon-code').value = couponCode;

                // // Submit the hidden form
                // document.getElementById('hidden-order-form').submit();
            }
        }
       
       
        // Toggle Coupons
        function toggleCoupons() {
            const couponList = document.getElementById('coupon-list');
            const button = document.querySelector('.show-coupons-button');
            const isVisible = couponList.style.display === 'block';
            
            couponList.style.display = isVisible ? 'none' : 'block';
            button.textContent = isVisible ? 'Show Coupons ▼' : 'Hide Coupons ▲';
            
            gsap.fromTo(couponList, 
                { opacity: isVisible ? 1 : 0, height: isVisible ? 'auto' : 0 }, 
                { opacity: isVisible ? 0 : 1, height: isVisible ? 0 : 'auto', duration: 0.3, ease: "power2.out" }
            );
        }

        // Apply Coupon Functionality
        document.addEventListener('DOMContentLoaded', function() {
            document.querySelectorAll('input[name="coupon"]').forEach(radio => {
                radio.addEventListener('change', function() {
                    document.getElementById('coupon-code').value = this.value;
                });
            });
            
            const applyButton = document.querySelector('.apply-coupon-button');
    
            if (applyButton) {
                applyButton.addEventListener('click', function() {
                    
                    const couponCode = document.getElementById('coupon-code').value.trim();
                    const selectedCoupon = document.querySelector('input[name="coupon"]:checked');
                    const urlParams = new URLSearchParams(window.location.search);
                    const retryOrderId = urlParams.get('orderId'); // <-- get orderId from URL
                    
                    if (couponCode || (selectedCoupon && selectedCoupon.value)) {
                        const codeToApply = couponCode || selectedCoupon.value;
                        
                        // Send AJAX request to backend to validate and apply coupon
                        fetch('/apply-coupon', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                            },
                            body: JSON.stringify({
                                couponCode: codeToApply,
                                userId: '<%= user._id %>',
                                orderId: retryOrderId || undefined // <-- send orderId if retry
                            })
                        })
                        .then(response => response.json())
                        .then(data => {
                            console.log("Data : ",data); 
                            if (data.success) {
                                document.getElementById('coupon-code').value = codeToApply; // This sets the input field
                                showMessage(`Coupon "${codeToApply}" applied successfully!`, false);
                                // Update the UI with the new totals from backend
                                if (data.newTotals) {
                                    const summaryItems = document.querySelectorAll('.summary-item span:last-child');
                                    summaryItems[0].textContent = `₹${data.newTotals.subtotal.toFixed(2)}`;           // Subtotal
                                    summaryItems[1].textContent = `-₹0.00`;                                           // Savings
                                    summaryItems[2].textContent = `-₹${data.newTotals.discount.toFixed(2)}`;          // Coupon Discount
                                    summaryItems[3].textContent = `₹${data.newTotals.deliveryCharge.toFixed(2)}`;     // Delivery
                                    summaryItems[4].textContent = `₹${data.newTotals.total.toFixed(2)}`;              // Total

                                    // Update place order button text
                                    document.querySelector('.place-order-button').innerHTML = `
                                        <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                                            <path d="M6 2L3 6v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2V6l-3-4z"></path>
                                            <line x1="3" y1="6" x2="21" y2="6"></line>
                                            <path d="M16 10a4 4 0 0 1-8 0"></path>
                                        </svg>
                                        Place Order • ₹${data.newTotals.total.toFixed(2)}
                                    `;
                                }
                            } else {
                                showMessage(data.message || 'Invalid coupon code');
                            }
                        })
                        .catch(error => {
                            console.error('Error applying coupon:', error);
                            showMessage('Error applying coupon. Please try again.');
                        });
                    } else {
                        showMessage('Please enter or select a coupon code');
                    }
                });
            }
        });

        // Payment Method Selection
        document.querySelectorAll('input[name="paymentMethod"]').forEach(radio => {
            radio.addEventListener('change', function() {
                if (this.value === 'wallet') {
                    // Check if wallet balance is sufficient
                    const totalAmount = parseFloat(document.querySelector('.summary-item.total span:last-child').textContent.replace('₹', ''));
                    const walletBalance = parseFloat('<%#= userWalletBalance %>');
                    
                    if (walletBalance < totalAmount) {
                        showMessage('Insufficient wallet balance');
                        document.getElementById('cod').checked = true;
                    }
                }
            });
        });


        //
        document.addEventListener('DOMContentLoaded', function() {
            // Handle address selection
            document.querySelectorAll('.address-card input[type="radio"]').forEach(radio => {
                radio.addEventListener('change', function() {
                    // Remove selected class from all cards
                    document.querySelectorAll('.address-card').forEach(card => {
                        card.classList.remove('selected');
                    });
                    
                    // Add selected class to the parent card of the checked radio
                    if (this.checked) {
                        this.closest('.address-card').classList.add('selected');
                    }
                });
            });
        });

        function showMessage(message, isError = true) {
            const msgBox = document.getElementById('form-message');
            msgBox.textContent = message;
            msgBox.style.color = isError ? 'red' : 'green';
            msgBox.style.display = 'block';

            setTimeout(() => {
                msgBox.style.display = 'none';
            }, 3000);
        }

    </script>
</body>
</html>