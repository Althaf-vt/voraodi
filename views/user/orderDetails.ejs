<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>VOGUE - Order Details</title>
    <link href="https://fonts.googleapis.com/css2?family=Montserrat:wght@400;500;600;700;800&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.11.5/gsap.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.11.5/ScrollTrigger.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/toastify-js/src/toastify.min.css">
    <script src="https://cdn.jsdelivr.net/npm/toastify-js"></script>
    <script src="/re-use/toast.js"></script>
    <link rel="stylesheet" href="/user/orderDetailsStyle.css">
    <link rel="stylesheet" href="/user/footerStyle.css">
</head>
<body>
    <%#- include('../../views/partials/user/header') %>

    <div class="message-container" id="messageContainer">
        <% if(message) %><%= message %>
    </div>

    <div class="order-details-container">
        <!-- Header with back button -->
        <div class="order-header">
            <a href="/orders" class="back-button">
                <i class="fas fa-arrow-left"></i> Back to Orders
            </a>
            <div class="profile-section">
                <!-- <img src="<%#= user.image %>" alt="Profile" class="profile-image"> -->
                <div class="profile-text">
                    <h1>ORDER DETAILS <span><%#= user.name %></span></h1>
                    <p>Order ID: <%= order.orderId %></p>
                </div>
            </div>
        </div>

        <!-- Main content -->
        <div class="order-content">
            <!-- Order status card -->
            <div class="order-status-card">
                <div class="status-header">
                    <h2>Order Status</h2>
                    <span class="status-badge <%= order.status.toLowerCase().replace(' ', '-') %>">
                        <%= order.status %>
                    </span>
                </div>
                
                <!-- Tracking progress -->
                <div class="tracking-progress">
                    <div class="progress-bar" style="--progress: <%= 
                        order.status === 'Ordered' ? 25 : 
                        order.status === 'Confirmed' ? 25 : 
                        order.status === 'Shipped' ? 50 : 
                        order.status === 'Out for Delivery' ? 75 : 
                        order.status === 'Delivered' ? 100 : 
                        order.status === 'Cancelled' ? 0 : 0 %>%">
                    </div>
                    <div class="tracking-steps">
                        <div class="step <%= order.status === 'Ordered' ? 'active' : 'completed' %>">
                            <div class="step-icon">1</div>
                            <span>Ordered</span>
                        </div>
                        <div class="step <%= order.status === 'Confirmed' ? 'active' : (order.status === 'Ordered' ? '' : 'completed') %>">
                            <div class="step-icon">2</div>
                            <span>Confirmed</span>
                        </div>
                        <div class="step <%= order.status === 'Shipped' ? 'active' : (order.status === 'Ordered' || order.status === 'Confirmed' ? '' : 'completed') %>">
                            <div class="step-icon">3</div>
                            <span>Shipped</span>
                        </div>
                        <div class="step <%= order.status === 'Out for Delivery' ? 'active' : (order.status === 'Delivered' ? 'completed' : '') %>">
                            <div class="step-icon">4</div>
                            <span>Out for Delivery</span>
                        </div>
                        <div class="step <%= order.status === 'Delivered' ? 'active' : '' %>">
                            <div class="step-icon">5</div>
                            <span>Delivered</span>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Order summary cards -->
            <div class="order-summary-grid">
                <!-- Order info card -->
                <div class="summary-card">
                    <h3><i class="fas fa-receipt"></i> Order Information</h3>
                    <div class="detail-row">
                        <span>Order Number:</span>
                        <span><%= order.orderId %></span>
                    </div>
                    <div class="detail-row">
                        <span>Order Date:</span>
                        <span><%= new Date(order.invoiceDate).toLocaleDateString() %></span>
                    </div>
                    <div class="detail-row">
                        <span>Payment Method:</span>
                        <span><%= order.paymentMethod %></span>
                    </div>
                    <div class="detail-row">
                        <span>Payment Status:</span>
                        <span class="payment-status"><%= order.paymentStatus %></span>
                    </div>
                </div>

                <!-- Delivery address card -->
                <div class="summary-card">
                    <h3><i class="fas fa-map-marker-alt"></i> Delivery Address</h3>
                    <div class="address-details">
                        <p><strong><%= order.address.name %></strong></p>
                        <p><%= order.address.street %></p>
                        <p><%= order.address.city %>, <%= order.address.state %></p>
                        <p><%= order.address.country %> - <%= order.address.pincode %></p>
                        <p>Phone: <%= order.address.phone %></p>
                        <% if (order.address.altPhone) { %>
                            <p>Alt. Phone: <%= order.address.altPhone %></p>
                        <% } %>
                    </div>
                </div>

                <!-- Order total card -->
                <div class="summary-card">
                    <h3><i class="fas fa-wallet"></i> Order Summary</h3>
                    <div class="detail-row">
                        <span>Subtotal:</span>
                        <span>₹<%= order.totalPrice.toFixed(2) %></span>
                    </div>
                    <div class="detail-row">
                        <span>Discount:</span>
                        <span>- ₹<%= order.discount.toFixed(2) %></span>
                    </div>
                    <div class="detail-row">
                        <span>Shipping:</span>
                        <span>+ ₹<%= order.deliveryCharge.toFixed(2) %></span>
                    </div>
                    <div class="detail-row total">
                        <span>Total:</span>
                        <span>₹<%= order.finalAmount.toFixed(2) %></span>
                    </div>
                </div>
            </div>

            <!-- Ordered items -->
            <div class="ordered-items-card">
                <h3><i class="fas fa-shopping-bag"></i> Ordered Items</h3>
                
                <div class="items-list">
                    <% order.orderedItems.forEach(item => { %>
                        <div class="item-row">
                            <div class="item-image">
                                <img src="<%= item.product.productImage[0] %>" alt="<%= item.product.productName %>">
                            </div>
                            <div class="item-details">
                                <h4><%= item.product.productName %></h4>
                                <p>Size: <%= item.size %></p>
                                <p>Quantity: <%= item.quantity %></p>
                                <p>Price: ₹<%= (item.price / item.quantity).toFixed(2) %></p>
                            </div>
                            <div class="item-total">
                                <p>₹<%= (item.price).toFixed(2) %></p>
                                <span class="item-status <%= item.status.toLowerCase() %>">
                                    <% if (item.status === 'Cancelled') { %>
                                        Cancelled
                                    <% } else if(item.returnStatus === 'Return Request' || item.returnStatus === 'Returned' || item.returnStatus === 'Rejected'){ %>
                                        <%= item.returnStatus %>
                                    <% } else { %>
                                        <%= item.status %>
                                    <% } %>
                                </span>
                            </div>
                            <div class="item-actions">
                                <% if (item.status !== 'Cancelled' && item.status !== 'Delivered' && order.status !== 'Cancelled' && order.status !== 'Delivered' && item.status !== 'Return Request' && item.returnStatus !== 'Returned' && item.returnStatus !== 'Rejected' && item.returnStatus !== 'Requested') { %>
                                    <button class="action-button cancel" onclick="cancelItem('<%= order.orderId %>', '<%= item.sku %>')">
                                        Cancel Item
                                    </button>
                                <% } else { %>
                                    <% if (item.status === 'Delivered') { %>
                                        <button class="action-button return" onclick="returnItem('<%= order.orderId %>', '<%= item.sku %>')">
                                            Return Item
                                        </button>
                                    <% } %>
                                <% } %>
                            </div>
                        </div>
                    <% }) %>
                </div>
            </div>

            <!-- Action buttons -->
            <div class="action-buttons">
                <a href="/invoice?id=<%= order.orderId%>" class="btn primary">Download Invoice</a>
                <% if (order.status !== 'Delivered' && order.status !== 'Cancelled' && order.status !== 'Return Request' && order.status !== 'Returned' && order.returnStatus !== 'Rejected') { %>
                    <button class="btn secondary" onclick="cancelOrder('<%= order.orderId%>')">
                        Cancel Entire Order
                    </button>
                <% } else { %>
                    <% if(order.status !== 'Cancelled' && order.status === 'Delivered' && order.status !== 'Return Request' && order.returnStatus !== 'Rejected' && order.returnStatus !== 'Returned') { %>
                        <button class="btn secondary" onclick="returnOrder('<%= order.orderId%>')">
                            Return Entire Order
                        </button>
                    <% } %>
                <% } %>
            </div>
        </div>
    </div>

    <!-- Return Modal -->
    <div class="modal-overlay" id="returnModal">
        <div class="return-modal">
            <div class="modal-header">
                <h3 class="modal-title">Return Request</h3>
                <button class="modal-close" onclick="closeReturnModal()">&times;</button>
            </div>
            <form id="returnForm">
                <div class="form-group">
                    <label class="form-label" for="returnReason">Reason for Return:</label>
                    <select class="form-select" id="returnReason" name="returnReason" onchange="toggleOtherReason()">
                        <option value="">Select a reason</option>
                        <option value="defective">Defective Product</option>
                        <option value="wrong_size">Wrong Size</option>
                        <option value="not_as_described">Not as Described</option>
                        <option value="damaged">Damaged During Shipping</option>
                        <option value="quality_issues">Quality Issues</option>
                        <option value="other">Other</option>
                    </select>
                </div>
                <div class="form-group hidden" id="otherReasonGroup">
                    <label class="form-label" for="otherReason">Please specify:</label>
                    <textarea class="form-input" id="otherReason" name="otherReason" placeholder="Please describe your reason for return..."></textarea>
                </div>
                <div class="modal-actions">
                    <button type="button" class="btn secondary" onclick="closeReturnModal()">Cancel</button>
                    <button type="submit" class="btn primary">Submit Return</button>
                </div>
            </form>
        </div>
    </div>

    <%- include('../../views/partials/user/footer') %>

    <!-- Keep all your existing scripts -->
    <script>
        // All your existing JavaScript code remains unchanged
        // (cancelItem, cancelOrder, returnItem, returnOrder, modal functions, etc.)
    </script>
</body>
</html>

<script>
    //cancel item 
    async function cancelItem(orderId, sku) {
    Swal.fire({
        toast: true,
        title: 'Are you sure?',
        text: "Do you want to cancel this item?",
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#d33',
        cancelButtonColor: '#3085d6',
        confirmButtonText: 'Yes, cancel it!'
    }).then((result) => {
        if (result.isConfirmed) {
            fetch('/cancel-item', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ orderId, sku })
            })
            .then(res => res.json())
            .then(data => {
                if (data.success) {
                    // Find and remove the item DOM element using SKU
                    const button = document.querySelector(`button[onclick*="${sku}"]`);
                    if (button) {
                        const itemDiv = button.closest('.order-item');
                        if (itemDiv) itemDiv.remove();
                    }

                    toast(data)
                } else {
                    toast(data,'error')
                }
            })
            .catch(err => {
                console.error('Cancel Item Error:', err);
                Swal.fire({
                    toast: true,
                    icon: 'error',
                    title: 'Error',
                    text: 'Something went wrong while cancelling the item.'
                });
            });
        }
    });
}

async function cancelOrder(orderId){
    Swal.fire({
        toast: true,
        title: 'Are you sure?',
        text: "Do you want to cancel this Order?",
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#d33',
        cancelButtonColor: '#3085d6',
        confirmButtonText: 'Yes, cancel it!'
    }).then((result) => {
        if (result.isConfirmed) {
            fetch('/cancel-order', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({orderId})
            })
            .then(res => res.json())
            .then(data => {
                if (data.success) {
                   toast(data)
                } else {
                    toast(data,'error')
                }
            })
            .catch(err => {
                console.error('Cancel Order Error:', err);
                Swal.fire({
                    toast: true,
                    icon: 'error',
                    title: 'Error',
                    text: 'Something went wrong while cancelling the Order.'
                });
            });
        }
    });
}

// Variables to store current return context
let currentReturnOrderId = null;
let currentReturnSku = null;
let isOrderReturn = false;

// Updated returnItem function
async function returnItem(orderId, sku) {
    isOrderReturn = false;
    currentReturnOrderId = orderId;
    currentReturnSku = sku;
    document.getElementById('returnModal').classList.add('active');
    document.body.style.overflow = 'hidden'; // Prevent background scrolling
}

async function returnOrder(orderId){
    isOrderReturn = true;
    currentReturnOrderId = orderId;
    currentReturnSku = null;
    document.getElementById('returnModal').classList.add('active');
    document.body.style.overflow = 'hidden'; // Prevent background scrolling
}

// Function to close modal
function closeReturnModal() {
    document.getElementById('returnModal').classList.remove('active');
    document.body.style.overflow = 'auto'; // Restore scrolling
    document.getElementById('returnForm').reset();
    document.getElementById('otherReasonGroup').classList.add('hidden');
    currentReturnOrderId = null;
    currentReturnSku = null;
}

// Function to toggle other reason input
function toggleOtherReason() {
    const reasonSelect = document.getElementById('returnReason');
    const otherReasonGroup = document.getElementById('otherReasonGroup');
    
    if (reasonSelect.value === 'other') {
        otherReasonGroup.classList.remove('hidden');
    } else {
        otherReasonGroup.classList.add('hidden');
    }
}

// Handle form submission
document.getElementById('returnForm').addEventListener('submit', function(e) {
    e.preventDefault();
    
    const reasonSelect = document.getElementById('returnReason');
    const otherReason = document.getElementById('otherReason');
    
    if (!reasonSelect.value) {
        Swal.fire({
            toast: true,
            icon: 'error',
            title: 'Error',
            text: 'Please select a reason for return.'
        }); 
        return;
    }
    
    if (reasonSelect.value === 'other' && !otherReason.value.trim()) {
        Swal.fire({
            toast: true,
            icon: 'error',
            title: 'Error',
            text: 'Please specify your reason for return.'
        });
        return;
    }
    
    const returnData = {
        orderId: currentReturnOrderId,
        reason: reasonSelect.value === 'other' ? otherReason.value.trim() : reasonSelect.options[reasonSelect.selectedIndex].text
    }
    if(!isOrderReturn){
        returnData.sku = currentReturnSku
    }

    const url = isOrderReturn ? '/return-order':'/return-item'
    
    // Send return request
    fetch(url, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify(returnData)
    })
    .then(res => res.json())
    .then(data => {
        if (data.success) {
            toast(data)
            closeReturnModal();
            
        } else {
           toast(data,'error')
        }
    })
    .catch(err => {
        console.error('Return Error:', err);
        Swal.fire({
            toast: true,
            icon: '',
            title: '<svg xmlns="http://www.w3.org/2000/svg" height="40px" viewBox="0 -960 960 960" width="40px" fill="#EA3323"><path d="M624-528.67q23.33 0 39.67-16.33Q680-561.33 680-584.67q0-23.33-16.33-39.66-16.34-16.34-39.67-16.34-23.33 0-39.67 16.34Q568-608 568-584.67q0 23.34 16.33 39.67 16.34 16.33 39.67 16.33Zm-288 0q23.33 0 39.67-16.33Q392-561.33 392-584.67q0-23.33-16.33-39.66-16.34-16.34-39.67-16.34-23.33 0-39.67 16.34Q280-608 280-584.67q0 23.34 16.33 39.67 16.34 16.33 39.67 16.33ZM480.12-418q-67.45 0-122.29 37.83Q303-342.33 277.33-280h57.34q22-40.33 60.95-62.83 38.94-22.5 84.83-22.5 45.88 0 84.38 22.83 38.5 22.83 61.17 62.5h56.67q-25-63-80.05-100.5T480.12-418ZM480-80q-83 0-156-31.5T197-197q-54-54-85.5-127T80-480q0-83 31.5-156T197-763q54-54 127-85.5T480-880q83 0 156 31.5T763-763q54 54 85.5 127T880-480q0 83-31.5 156T763-197q-54 54-127 85.5T480-80Zm0-400Zm0 333.33q139.58 0 236.46-96.87 96.87-96.88 96.87-236.46t-96.87-236.46Q619.58-813.33 480-813.33t-236.46 96.87Q146.67-619.58 146.67-480t96.87 236.46q96.88 96.87 236.46 96.87Z"/></svg>',
            text:'Something went wrong , Please try again later.'
        });
    });
});

// Close modal when clicking outside
document.getElementById('returnModal').addEventListener('click', function(e) {
    if (e.target === this) {
        closeReturnModal();
    }
});


// Show message notification
function showMessage(message, type = 'error', duration = 5000) {
    const container = document.getElementById('messageContainer');
    
    const messageDiv = document.createElement('div');
    messageDiv.className = `message-notification ${type}`;
    messageDiv.innerHTML = `
        <div class="message-header">
            <h4 class="message-title">${type.charAt(0).toUpperCase() + type.slice(1)}</h4>
            <button class="message-close" onclick="closeMessage(this)">&times;</button>
        </div>
        <p class="message-text">${message}</p>
    `;
    
    container.appendChild(messageDiv);
    
    // Trigger show animation
    setTimeout(() => {
        messageDiv.classList.add('show');
    }, 10);
    
    // Auto remove after duration
    setTimeout(() => {
        closeMessage(messageDiv.querySelector('.message-close'));
    }, duration);
}

// Close message notification
function closeMessage(button) {
    const messageDiv = button.closest('.message-notification');
    messageDiv.classList.remove('show');
    setTimeout(() => {
        messageDiv.remove();
    }, 300);
}




function showMessage(message, type = 'error', duration = 3000) {
    const container = document.getElementById('messageContainer');
    
    const messageDiv = document.createElement('div');
    messageDiv.className = `message-notification ${type}`;
    messageDiv.innerHTML = `
        <div class="message-header">
            <h4 class="message-title">${type.charAt(0).toUpperCase() + type.slice(1)}</h4>
            <button class="message-close" onclick="closeMessage(this)">&times;</button>
        </div>
        <p class="message-text">${message}</p>
    `;
    
    container.appendChild(messageDiv);
    
    // Trigger show animation
    setTimeout(() => {
        messageDiv.classList.add('show');
    }, 10);
    
    // Auto remove after duration
    setTimeout(() => {
        closeMessage(messageDiv.querySelector('.message-close'));
    }, duration);
}

// Close message notification
function closeMessage(button) {
    const messageDiv = button.closest('.message-notification');
    messageDiv.classList.remove('show');
    setTimeout(() => {
        messageDiv.remove();
    }, 300);
}

</script>